{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation sample template that update the winning team",

  "Resources": {

    "WinnerTeamUpdateL": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
          "import boto3",
          "from boto3.dynamodb.conditions import Key, Attr",
          "def lambda_handler(event, context):",
          "   MatchId = int(event['queryStringParameters']['mid'])",
          "   Team = event['queryStringParameters']['team']", 
          "   dynamodb = boto3.resource('dynamodb')",
          "   bidtbl = dynamodb.Table('Bidding')",
          "   response = bidtbl.scan(FilterExpression= Attr('matchId').eq(MatchId))",          
          "   items = response['Items']",
          "   for x in range(len(items)):",
          "       if items[x]['team'] == Team:",
          "           items[x]['winner'] = 'WIN'",
          "           bidtbl.put_item(Item=items[x])",
          "       else:",
          "           items[x]['winner'] = 'LOS'",
          "           bidtbl.put_item(Item=items[x])",         
          "   return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.amazonaws.com/suraj-console/AdminBidAmountUpdate.html\"}}" 
          ]]}
        },
        "Description": "Winning team update function",
        "FunctionName": "WinnerTeamUpdateL",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Runtime": "python3.6"
      }
    },


    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
    "Policies": [{
          "PolicyName": "DDBwriteAccessPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "*",
              "Resource": ["arn:aws:dynamodb:us-east-1:488599217855:table/Bidding", 
              "arn:aws:dynamodb:*:*:table/*/backup/*"]
            },{
      "Effect": "Allow",
            "Action": ["dynamodb:TagResource","dynamodb:UntagResource",
        "dynamodb:PurchaseReservedCapacityOfferings"],
      "Resource": "*"  
      }
      ]
          }
        }],
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "WinnerTeamUpdateAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "winning team update API",
        "Description": "API used for bidding table update",
        "FailOnWarnings": true
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["WinnerTeamUpdateL", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "WinnerTeamUpdateAPI"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "BiddingValueApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "WinnerTeamUpdateAPI"},
        "StageName": "LATEST",
        "Variables": {
          "Amogh": "Tiwari-Test7"
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["UserRegRequestGET", "UserRegRequestPOST"],
      "Properties": {
        "RestApiId": {"Ref": "WinnerTeamUpdateAPI"},
        "StageName": "TestStage"
      }
    },

    "WinnerTeamUpdateResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "WinnerTeamUpdateAPI"},
        "ParentId": {"Fn::GetAtt": ["WinnerTeamUpdateAPI", "RootResourceId"]},
        "PathPart": "UserReg"
      }
    },

    "UserRegRequestGET": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["WinnerTeamUpdateL", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "WinnerTeamUpdateResource"},
        "RestApiId": {"Ref": "WinnerTeamUpdateAPI"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    },

    "UserRegRequestPOST": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["WinnerTeamUpdateL", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "WinnerTeamUpdateResource"},
        "RestApiId": {"Ref": "WinnerTeamUpdateAPI"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }

  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "WinnerTeamUpdateAPI"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}
    }
  }
}