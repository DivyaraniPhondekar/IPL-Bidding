{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that contains a single Lambda function behind an API Gateway",

  "Resources": {
    "FrontPageLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
		"Handler": "Front_Page_Lambda.lambda_handler",
		"Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
		
           "S3Bucket": "htmls3",
		   "S3Key": "Front_Page_Lambda.zip"
		  
        },
       "Runtime": "python3.6",
	    "Timeout": "25"
      }
    },


    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
    "Policies": [{
          "PolicyName": "DDBreadAccessPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "*",
              "Resource": ["arn:aws:dynamodb:us-east-1:488599217855:table/Schedule", 
              "arn:aws:dynamodb:*:*:table/*/backup/*"]
            },{
      "Effect": "Allow",
            "Action": ["dynamodb:TagResource","dynamodb:UntagResource",
        "dynamodb:PurchaseReservedCapacityOfferings"],
      "Resource": "*"  
      }
      ]
          }
        }],
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "FrontPageLambdaApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "FrontPageLambdaApi",
        "Description": "API used for bidding table update",
        "FailOnWarnings": true
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["FrontPageLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "FrontPageLambdaApi"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "BiddingValueApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "FrontPageLambdaApi"},
        "StageName": "LATEST",
        "Variables": {
          "Amogh": "Tiwari-Test7"
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["UserRegRequestGET", "UserRegRequestPOST"],
      "Properties": {
        "RestApiId": {"Ref": "FrontPageLambdaApi"},
        "StageName": "TestStage"
      }
    },

    "FrontPageValueResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "FrontPageLambdaApi"},
        "ParentId": {"Fn::GetAtt": ["FrontPageLambdaApi", "RootResourceId"]},
        "PathPart": "UserReg"
      }
    },

    "UserRegRequestGET": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["FrontPageLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "FrontPageValueResource"},
        "RestApiId": {"Ref": "FrontPageLambdaApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    },

    "UserRegRequestPOST": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["FrontPageLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "FrontPageValueResource"},
        "RestApiId": {"Ref": "FrontPageLambdaApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }

  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "FrontPageLambdaApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}
    }
  }
}